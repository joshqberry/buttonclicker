
Some sites say Arduino 1.0.5 wasn't working with shield, but that 1.0.3 was. Am
currently using 1.6.3. Don't know if that version has known issues. Haven't seen any
sites say that it does. Although you'd have to go back and check if they're talking
about the official Arduino shield or the CC3000.

Might consider adding antenna to boost signal

Heroku add-ons? Can I add on dino or arduino?

OK, some info gathered from Heroku info pages (all bookmarked):

"The Heroku platform automatically routes HTTP requests sent to your app’s hostname(s)
to your web dynos."
"Inbound requests are received by a load balancer that offers SSL termination. From here
they are passed directly to a set of routers. The routers are responsible for
determining the location of your application’s web dynos and forwarding the HTTP
request to one of these dynos. A request’s unobfuscated path from the end-client
through the Heroku infrastructure to your application allows for full support of
HTTP 1.1 features such as chunked responses, long polling, websockets, and using an
async webserver to handle multiple responses from a single web process."

... There's some info on timeouts, not quite sure if it applies for this case, but
you may want to look at it...
... also on response buffering, same thing...
... also for "100-continue", which I don't think I'd need
... Also a whole page on worker dynos, which I don't think I'd need

From this page:
http://en.wikipedia.org/wiki/Push_technology
"For example, BOSH is a popular, long-lived HTTP technique used as a long-polling
alternative to TCP when TCP is difficult or impossible to employ directly (e.g.,
in a web browser); it is also an underlying technology in the XMPP, which Apple
uses for its iCloud push support."

YOU MAY VERY MUCH NEED TO LOOK AT WHAT BOSH HAS TO OFFER!
http://en.wikipedia.org/wiki/BOSH

So here's a typical request that goes to Heroku. This request was made when I
refreshed the page at Heroku. So I guess this is the type of request you'd have
to send to Heroku one way or another. (NOTE: At the very beginning of the request,
there an extra bit, "at=info", but the Heroku info page doesn't indicate that that
is a necessary part of the request.):
  method=GET path="/" host=aqueous-scrubland-2496.herokuapp.com
  request_id=2e89beee-6b43-475e-a05a-f7180cb4762d fwd="75.166.2.229" dyno=web.1
  connect=1ms service=107ms status=200 bytes=2975

"WebSocket functionality is supported for all applications."

...Lots more, too much, on the Dynos page. Leaving it open for now.

Hey, SHOULD I be using
  window.pusher_key = '<%= ENV['heroku_key'] %>';
in my application layout?
Wes sez: you should never give keys to your client, because they can impersonate you.
So any need for a key should involve an ajax call to the server site, which will then
provide the key. Well, not looking at that now.
... huh, looks like taking this out of application layout:
    <script type="text/javascript">
       window.pusher_key = '<%= ENV['heroku_key'] %>';
     </script>
... doesn't affect the button. It's still working. But will it on heroku?


-------------

Tuesday 5/14 5 p.m.

OK, after a bunch of reading, it seems that I need to create PRIVATE CHANNELS in order to let
a client (such as the client pressing the button) trigger an event. Am going through the
process of doing so on localhost...
... am seeing the right thing when I load page -- a 404 error ("couldn't get auth info from
your webapp"). And then clicking on button gives a 500 ("internal server error"). That's the
one that's worrisome.
... then again, maybe not. After setting up routes for the callback, I'm pretty sure it's
now going to the right spot... just not working because the setup isn't done. In other words,
I'm no longer seeing a 404 error, just a 500 error.

  OK, this may be awesome?  Following https://github.com/dipth/pusher_demo, I added access to
  to the pusher key within the browser window. Then, I started the Rails server,
  then went to browser window. Interestingly, as soon as I clicked on the tab,
  there was some movement in the terminal  -- although I guess that makes sense;
  the javascript stuff is firing only on the... well, I guess the "activation"
  of that specific window, although I don't know exactly what function is doing
  the activating (load? ready?) -- and so I saw this:

  Started GET "/" for ::1 at 2015-05-15 10:35:57 -0600
Processing by LedController#index as HTML
  Rendered led/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 667ms (Views: 666.2ms | ActiveRecord: 0.0ms)

(then some of the usual GET "assets/etc." stuff...)

Started POST "/pusher/auth" for ::1 at 2015-05-15 10:35:59 -0600
Processing by PusherController#auth as */*
  Parameters: {"socket_id"=>"45441.3484269", "channel_name"=>"private-button"}
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.0ms)

THEN, I refreshed and saw this:

Started GET "/" for ::1 at 2015-05-15 10:36:21 -0600
Processing by LedController#index as HTML
  Rendered led/index.html.erb within layouts/application (0.1ms)
Completed 200 OK in 40ms (Views: 39.2ms | ActiveRecord: 0.0ms)

(then some of the usual GET "assets/etc." stuff...)

Started POST "/pusher/auth" for ::1 at 2015-05-15 10:36:21 -0600
Processing by PusherController#auth as */*
  Parameters: {"socket_id"=>"45439.3485084", "channel_name"=>"private-button"}
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms)

AND, THIS IS GOOD, no visible errors when I look at the inspect-elements network
tab! Whereas before, I'd been getting that 500 error! So as of now, I can see that
pusher is sending me a socket_id and channel_name. And a response, in the form of an
authentication hash, is being sent back. But that's actually got me confused. I haven't
placed any code yet that is supposed to be TAKING the socket_id and channel_name and
CREATING a hash out of it. Huh... Why would that be working?

Now... as far as the button goes, it still works, and yet I still get a 500 error each time
I click the button. Not sure of the cause or the solution.

OK, so I pushed to Heroku just now, button still not working. But there are TWO errors going
on in Heroku vs. one error in local host. On Heroku, when I refresh the page, I get an error
that says, basically, code 4005: path not found. Then clicking button gives me a 500 error.
So I assume that fixing the FIRST error would make it so I could get the button on Heroku
working, even if it was still showing the same error as on localhost.


-------------

Monday 5/13 8 p.m.

  Plan of attack:
  make sure shit still works
  test get call to local
  test get call to heroku
  see if you can get Arduino to make get call
  then fuck with websockers

  OK, going to try to use the Puma webserver for Heroku, mainly just for (hopefully) added
stability.
  -- Heroku says: "You can only utilize threads in Puma if your entire code-base is thread
  safe." I assume mine is. Not gonna worry about that for now.
  -- also, this is kinda mainly for a app where multiple people will be using it at the same
  time. Nonetheless...
  -- You'll have to keep an eye out for possible timeouts, and take appropriate action.
  -- So when I start Rails server now, I see this (just noting it...)
        Puma 2.11.2 starting...
      * Min threads: 0, max threads: 16
      * Environment: development
      * Listening on tcp://localhost:3000
  -- OK, all good as far as I can tell. Can see page on localhost, can see page on Heroku.
  HOWEVER... the "alsonumberup" button DOESN'T work on Heroku. And I'm not sure why! I'm
  seeing, in the Heroku logs, a "500" error, which, according to Wikipedia, is "A generic
  error message, given when an unexpected condition was encountered and no more specific
  message is suitable." Well, maybe I can't trigger the same Pusher action in two different
  ways -- at least via Heroku.
  ... OK, the logs also say "Pusher::ConfigurationError (Missing client configuration:
  please check that key, secret and app_id are configured.):"
  ... uh oh, you know what? The "also numberup" is the ONLY method that is currently using
  Pusher. So that's a problem. Heroku is not responding to Pusher.
  ... OK, well, Heroku config tells me that it does see Pusher key, but not the other stuff.
  Even though I'd thought I'd made that accessible...
  ... well, the guidelines say to configure your app for development mode only, so I've cut
  out the stuff I had in the production.rb file (just the same stuff as in the Dino.rb file...)
  -- So now, localhost still works in full, Heroku site... same thing still. Not reading the
  client configuration.
  ... OK, took out all the stuff about the Dino board in the development.rb file. THAT's gotta
  do it, right?
  -- localhost still works in full, Heroku site... still not in full.
  ... For Heroku config, I had tried to use ENV['app_id'], etc., but I've now changed that to
  more simply Pusher key = 0000000, etc....
  -- that's not doin' it.
  ... OK, tried defining the app_id, etc., within the method I was calling... (still don't
  see why this should be needed when it wasn't needed on localhost...)
  ... still no good... maybe it's the Dino.rb file? So let's get entirely rid of that...
  -- still no good. Shit, I'm at loss now.
  ... tried moving pusher gem to production group, no good.
  ... tried deleting pusher yml file (wasn't using it anyway), no good.
  ... OK, huh. Tried using the example test that Heroku provided. On a different page. And the
  first time I tried, the page rendered, although the alert didn't fire. And then the second
  time, I got an error message. And the Heroku logs show that the first rendering was fine
  and that the second gave me a 500 error again.
  ... and after I went back -- after a couple of minutes -- same thing again. First time
  rendered although alert didn't fire; then I went to a different page; then back to the
  original page, where I got an error message.
  ... I dunno. Really I don't.
  ... OK, let's get rid of reference to Pusher key, etc., everywhere else... and leave that
  solely in development.rb, as I was told...
  -- OK, fuckin' FINALLY. The first time I went to the page, it rendered, as before, without
  doing anything. But second time around, for Christ's fuckin' sake, the alert popped up.
  JEEEESUS what a fuckin' problem. It's now midnight. This has been my whole night.
  ... huh, so I put back some of the stuff I took out, just to see if I could pinpoint the
  problem. I put back the stuff that related to the "alsonumberup" button, and that stuff
  still doesn't work, but the alert still does. I can't figure why the button won't work,
  though, if the alert will. Maybe I bound that earlier channel, somehow, to the earlier
  api key, etc. Maybe it's an issue with not having a view associated with that action.
  Maybe I'm setting global variables for both Pusher.new's and both channels that have the same
  name, and so those are fucking with each other.
  -- Nope, that last one's not it; I tried changing one pair; no success with the button still.
  ... although on localhost, BOTH the button and the alert work.
  Weird, even though localhost WORKS, in "inspect element" I can see errors: It says:
  "GET http://localhost:3000/alsonumberup 500 (Internal Server Error)". So why does the button
  work anyway? Is this just a problem of using the verb GET, and somehow localhost weasels
  around that, but Heroku won't?

  OK, fuck the button. Can I get pusher to make the fucking number go up?

-------------

Sunday 5/10 1 p.m.

  New approach. See if you can send a GET to Heroku, then see if you can program
  Arduino to do that.

  Huh, note that running Rails c ALSO says board is not found. Why is it not found?

  Note that you've ADDED A CREDIT CARD to Heroku in hopes of add the pusher addon,
  which isn't functioning correctly yet...

  Was taking a look at how Javascript was working on Heroku page (as part of trying
  to just make a GET request to that page). Was seeing an error saying something along
  the lines of "you have to declare your API key when you instantiate Pusher." Not
  sure what did it, but after updating the pusher script call in my application layout
  file, and getting rid of two extra jquery script calls, and moving the pusher script
  call above the jquery call, and sticking Pusher.app_id = ENV['app_id'] in several
  spots, including the index definition in the controller, as well as the development
  and production environments files... AND adding the Heroku pusher addon... that error
  is gone. Ooofah.

Sunday 8:30 p.m. After a couple of adjustments (see way at the bottom), I can
PERFORM A GET REQUEST OF HEROKU. Oh hell yeah. Now: Can I make a GET request that
doesn't return the page but rather makes something happen?

OK, so this doesn't work in postman:
pongtester.herokuapp.com/numberup
... but THIS does:
pongtester.herokuapp.com?numberup
... although it doesn't change the number...

Well, you can enter pongtester.herokuapp.com?blah and the page still renders...

OK, my postman call to pongtester.herokuapp.com/numberup, as stated, didn't work...
but didn't return a 404. It says "the change you wanted was rejected". Checked the
Heroku logs, there's this: "Security warning: an embedded <script> tag on another
site requested protected JavaScript. If you know what you're doing, go ahead and
disable forgery protection on this action to permit cross-origin JavaScript embedding."
... now, I have no idea what I'm doing whatsoever, but what the hell. Took out the
protect_from_forgery line from the Application controller...

But all that happens then, if I make the pongtester.herokuapp.com/numberup call, this
gets returned:

incrementValueBig();

... and that's it. Nothing else on the page.

Hmm, the internets tell me: "Browsers do not provide an API for listening for any HTTP
request." So that's maybe not an option... but then what is?

I suppose websockets. So that they're constantly listening for updating information.

I dunno, does that mean I'm back where I was?

-------------

Saturday 5/9 10 a.m.

Could this just be an issue of not waiting long enough for a connection? Well...
maybe. I certainly do see the TCP error pop up sometimes in situations where I haven't
come to expect seeing it.

Adding "TCP" to the connection arguments like so:
  if ( !client.connect(server, 80, TCP)
... does not work... even though I got idea from a comment on SparkFun page that was
only a year old...

OK, think this through:

Three issues here:

  1. Can't press button and have heroku site change.

      Button press can be recognized by my computer via USB.

      When running Rails server on my computer, button press works. Why.

      Because computer recognizes board, and therefore can read the button press.

      There is no code on the Arduino telling it what to do with a button push. BUT
      because I'm using Dino, the Dino code on the Arduino is able to read my Ruby
      code. The Ruby code is running the show as far as recognizing a button push
      and making things happen when it recognizes that button push.

      Heroku can't sense the board is there. That is the first and crucial issue.

      Upon deploy, it says as much: "The board is not connected." So...

      Two potential issues here:
        1. Some folks are using ethernet cables
        2. some folks are using node.js.


  2. Can't connect to localhost to test wifi.

      This is actually not a necessary step but a half-step. So maybe I should stop
      fucking with this step.

  3. Can't get wifi to connect to Heroku.

      From what I can surmise, this is an issue with the https. Can get wifi to do
      GET requests to other sites. So this maybe is pretty solvable if you just
      get a domain that doesn't have https.

      I think I need to totally give up on wifi for now, though. It's a complicated
      issue. The goal should just be to click, and have heroku site change. That way,
      at least, a player:
          -- brings computer to table and plugs in
          -- logs in to Heroku site on same computer
          -- Heroku site reads button presses and acts accordingly.

Saturday 3 p.m. Can't figure things out, need to start thinking about quitting or
asking for some serious help. Just don't have the knowledge. Nonetheless, am back
on trying to connect via wifi...

    -- As always, can connect to www.example.com
    -- If I change "client.println("GET /index.html HTTP/1.1");" to
    "client.println("GET / HTTP/1.1");", still works fine.

    HOWEVER, my app doesn't HAVE an index.html. Could this be the issue?

    Well, "client.println("Host: pongtester.herokuapp.com");" doesn't work, but that
    could be because of the https issue...

    But trying to connect to my local host with just the / doesn't work either...

-------------

Thursday 5/7 midnight

changed production.rb code; added:
config.force_ssl = false
Nope, didn't work.

if that doesn't work, try just renaming Heroku site to
http://whatever
... and see if that works.
Nope, won't let you do that.


if that doesn't work, you might try this in config file:
config.allow_ssl_in_production = false


-------------

Wednesday 5/6 8:30 p.m.

Where are we:
  With shield attached, am still able to upload dino sketch and then can run app via
  local host. (Changed button input to pin 5; I think that that 2 wasn't available with
  the shield, although I can't remember if I tried it or not.)

  Also with shield attached, can connect to internet from home and send get requests to
  some sites, although currently not Heroku.

  ... Well, I wrote the above, but now I AM having issues connecting. The internet
  connection test isn't returning anything.
  ... OK ran a test, and it shows Arduino isn't identifying the wifi shield at all.
  ... In fact, I took off the shield and tried just the basic app on localhost, and
  terminal tells me the board is not connected!
  ... huh, so I saw that the usual serial port I was supposed to be using was not
  listed... which I guess stemmed from me upgrading to Arduino 6.3 yesterday. I
  know this because when I opened 1.0.6, I was able to see that port was available.
  And now, my app is once again OK to run on local host.
  ... and connection test works again.

  Don't tell me I'm gonna have to read all the Arduino update notes to figure out
  if I should stick with this version or get the right drivers working on the latest
  version...

  Well, I did see something about 6.3 fixing an issue with being able to connect
  to urls that start with https, and my Heroku app is one of those, so...

  OK, tried using "heroku console" command in terminal, that is no longer offered.
  Was able to do "heroku run rails s" instead, but it doesn't recognize the existence
  of the board... So I've gotta think that pretty much answers that I'm not going to
  be able to affect Heroku via a button plugged into my computer (never had planned
  to, anyway -- but it woulda be a helpful midpoint. I suppose I could get a program
  to trigger a pusher event and therefore Heroku, but... nope, not unless I'm
  totally out of ideas).
  ... while reading a bunch of Heroku info pages, saw an option to use "heroku run
  bash". Which I did... but same issue: "the board is not connected".

  Maybe try to connect to local host via wifi then use buttons? Maybe. But that's
  going to involve new challenges.
  If you're gonna try that, see this:
  http://forum.arduino.cc/index.php?topic=177527.0
  Googling "how to find my ip address" returned this: 75.166.2.229 (as my "public"
  address...)
  ... although when I'm trying to connect via the shield, it tells me that the IP
  address is 192.168.0.20
  HOWEVER, looking up my ip address on the mac returns something slightly different:
  192.168.0.4 -- this should be my "internal" ip address...
  And it give my router address as 192.168.0.1, so I don't know where that "20" is
  coming from...
  Neat, if you enter 192.168.0.1 in a browser, you actually get a page corresponding
  to the router...
  ... although I don't know if that's the right address, or if there's a second one
  associated with my computer, or if I need my router address.
  ... by the way, the Google IP address provided by the above site didn't work for me,
  but don't know why.
  Note that you can type "127.0.0.1:3000" into your browser window (while
  Rails server is running) and see the page you're seeking...
  But even with Rails server running, "192.168.0.4:3000" and "192.168.0.4:3000" don't
  do anyting. They immediately say webpage isn't available. Interestingly,
  "192.168.0.20:3000" at least appears to be trying to connect... same with
  "75.166.2.229:3000"
  From the web: "If the Mac is connected to a network as well as the internet, then
  it will have an internal IP address which marks its location on the local network,
  and an external IP, which is the IP address of your internet connection. "

-------------

Tuesday 5/5 midnight: Can't quite figure out how to access Heroku through the wifi.
Can connect to other sites like www.example.com and www.google.com. Since my Heroku
site doesn't have a "www", had to use the server "http://aqueous-scrubland-2496.herokuapp.com".
Seems to almost connect, then says it can't make a TCP/IP connection.

Also: Downloaded the Adafruit library, but that just wouldn't work. I thought it
might. Guess the code don't match up. Still, the sketch that Adafruit suggested
may have some usage for me... Although I just tried to delete it, so you might have
to find it on the web. Also, try to get rid of the Adafruit Library listing under
"Examples" (as well as any other associated files.)
... and also try to get rid of the SFE_cc3000_Library-master2 listing. I think I deleted this too...

Huh, the on-off buttons that turn on/off led on arduino aren't working anymore. Not
worrying about that, though -- button still works.

----------------------

may have to use ruby version 1.9.3 to make this work?

Huh, so it appears that not precompiling my assets (by adding the lib/assets.rake file
and its interior code) doesn't stop my app from running locally... but it does slow it
DOWN a fair bit. It's now not always registering clicks; and also, the outpput in the
terminal is decidedly slower. In fact, sometimes the click registers on the webpage but
NOT in the terminal. Strange.
... No, maybe that's not the issue. My computer is moving slowly suddenly. Apparently
because of all the Heroku push attempts I just made, although I don't understand why
that'd be an issue... Seems to be an issue only with the button; using the in-page
button works fine. Hope I didn't overload my Arduino...
... well, I unplugged it, stopped Rails server, re-plugged it back in, re-started Rails
server and all is well again...

... However, the addition of that assets.rake file did not fix the Heroku-push error.

... oh, wait, I THINK stuff has to be pushed to GitHub first, then to Heroku. I think
you're supposed to be able to skip the GitHub step, but maybe I'm configured to
require that.

... Huh, that did it. I STILL got the error saying that the rake had been aborted, and
that I had an unitialized constant YAML... and yet the deploy was complete, apparently.
Now, though, can I use this app via Heroku, or did I just block something that was
necessary to have?

Well, can't even see Heroku page for now... page said error occurred in application.
Thought it might be a database issue. Tried to migrate database, it wouldn't let me...

Hmm, I wonder if that's an issue with using Pusher.

Well, someone on the internets told me, and maybe I knew this, I dunno, that you DON'T
do a Heroku db:create. It won't let you. You instead to a db:migrate.

OK, so next issue is back to same I've seen before: unintialized constant YAML. So
neither a push nor a db:migrate will work till I've fixed this issue.

OK, so, added the 'dotenv' gem, and a ".env" file with the pusher stuff in it, and
added the ".env" file to the gitignore file. App still working locally, athough
seems to be moving slower. Could be an issue other than that of the code changes,
though...

... Actually, the "moving slower" thing was due to the connection loosening... that was
an easy fix, although not the first thing I thought of...

Fiddled with moving things around more, in order to make pusher yaml file "viewable" by
Heroku, and was able to push to Heroku once more... BUT still saw same error of
'unitialized constant yaml.' So... yep, still can't open Heroku page.

So one thing I think I'm verifying here, and maybe I knew this once upon a time, but I
had damn well forgotten it, is that with my current app settings, I am UNABLE to push
changes to Heroku unless I first push those changes to GitHub. (I suppose it's possible
that all I have to do is COMMIT changes, not push them, but whatever.) YOU INDEED
VERIFIED THIS; YOU HAD THE GEM 'PG' TWICE IN THE GEMFILE, THEN COMMENTED OUT ONE OF
THEM, AND THEN TRIED TO PUSH TO HEROKU, BUT ERROR STILL SAID YOU HAD TWO LISTINGS OF
THAT GEM. AFTER YOU COMMITTED YOUR CHANGE AND PUSHED TO GITHUB, YOU WERE ABLE TO PUSH
TO HEROKU WITHOUT THAT ERROR.

So: It's a good lesson, one that will take me forever to learn, but still:
  You had been trying to push to Heroku for... what? At least a few hours? And each time,
  you saw an error message that said you had the gem 'pg' listed in two different
  places in your gemfile. But then there also was that "uninitialized constant YAML"
  error, and so you were concentrating on that. FOR HOURS. And then finally you
  decided to just get rid of that small error that you were sure was not the problem.
  And after you did, you were able to push to Heroku.
    For fuck's sake. I don't even know if that solves all of my Heroku-push problem,
    but it sovles one I'd been at for hours. You have really got to slow your roll a
    bit when problem-solving. If I'd just read that error and tackled that error first...

Once again, just for the notes:
  Removing the 'pg' duplicate from my gemfile (the one NOT under group :production do)
  solved my issue.

Indeed, even though I had created a lib/assets/assets.rake and added this:
  Rake::Task["assets:precompile"].clear
  namespace :assets do
    task 'precompile' do
        puts "Not pre-compiling assets..."
    end
  end
... that turned out not to be the issue.

The answer was staring at me the whole damnin' time.

OK, SO AFTER ALL THAT... pushing the button does nothing to affect Heroku. Maybe I
should have expected that. Then again... well, more to look at.

Preliminary look makes it seem as though I needed wireless NOT ONLY to get cords away
from ping pong table, but also to reach Heroku in the first place. Though I'm not
convinced. Why WOULDN'T Heroku site be able to respond to this?

HEY I did good that time. Couldn't connect Arduino to wifi. Only spend about 20 minutes
looking online before I just went back and considered that my network password was
wrong. Fixed password, and got connected. Cool.

----------------------

So here are the pins that I think are off-limits (this comes from
https://learn.sparkfun.com/tutorials/cc3000-hookup-guide):

The pins used by the shield are as follows:

2 (INT) is the interrupt pin that the CC3000 uses to notify the Arduino that it has data.

7 (EN) is the enable pin that the Arduino uses to turn the CC3000 off and on.

8 (SDCS) is the chip select for the SD card.

10 (CS) is the chip select for the CC3000.

11 (MOSI) is the SPI communication line from the Arduino to the CC3000.

12 (MISO) is the SPI communication line from the CC3000 to the Arduino.

13 (SCK) is the SPI clock line.

--------------------------------

This is pretty interesting -- here's what I got when trying to connect to unsecured
network at Galvanize Platte:

---------------------------
SparkFun CC3000 - WebClient
---------------------------
CC3000 initialization complete
Connecting to SSID: galvanize guest platte
IP Address: 10.6.66.128
Performing HTTP GET of: www.google.com

HTTP/1.1 307 Temporary Redirect
X-Frame-Options: deny
Cache-Control: no-cache
Location: https://n76.network-auth.com/splash/?mac=00%3A18%3A0A%3A08%3AE5%3A50&client_ip=10.20.161.111&client_mac=70:FF:76:02:05:06&vap=1&a=f1abd670358e036c31296e66b3b66c382ac00812&b=78604&auth_version=5&key=b87659b9cf9b8e785eea48a06fb4b2cb99677e4f&acl_ver=P351250V2&continue_url=http%3A%2F%2Fwww.google.com%2Findex.html
Content-Type: text/html
Pragma: no-cache
Expires: 0
Continue: close
Connection: close
Transfer-Encoding: chunked
Server: lighttpd/1.4.35

17b
<html>
<body>You are being <a href='https://n76.network-auth.com/splash/?mac=00%3A18%3A0A%3A08%3AE5%3A50&client_ip=10.20.161.111&client_mac=70:FF:76:02:05:06&vap=1&a=f1abd670358e036c31296e66b3b66c382ac00812&b=78604&auth_version=5&key=b87659b9cf9b8e785eea48a06fb4b2cb99677e4f&acl_ver=P351250V2&continue_url=http%3A%2F%2Fwww.google.com%2Findex.html'>redirected</a>.</body></html>

0

Finished WebClient test

--------------------------------

When I tried to connect to www.example.com using what I THOUGHT was its IP address,
I got this:

---------------------------
SparkFun CC3000 - WebClient
---------------------------
CC3000 initialization complete
Connecting to SSID: LolaDog
IP Address: 192.168.0.20
Performing HTTP GET of: 93.184.216.119

HTTP/1.1 200 OK
Accept-Ranges: bytes
Content-Type: text/html
Date: Sat, 09 May 2015 16:46:30 GMT
Last-Modified: Sat, 09 May 2015 15:54:18 GMT
Server: ECS (mdw/1399)
Content-Length: 94
Connection: close

<html><head><title>edgecastcdn.net</title></head><body><h1>edgecastcdn.net</h1></body></html>

Finished WebClient test

--------------------------------

Hmm, this is promising: When I tried to use
client.print("Host: pongtester.herokuapp.com");,
... I got this back

NOTE THAT YOU DIDN'T USE "PRINTLN", ALSO NOTE THAT YOU SHOULD'VE ACTUALLY BEEN
CONNECTING TO WWW.EXAMPLE.COM STILL, AS FAR AS I CAN TELL...

Note that when using client.println("Host: pongtester.herokuapp.com");, with the "ln",
I got nothing at all (could not make TCP connection):


---------------------------
SparkFun CC3000 - WebClient
---------------------------
CC3000 initialization complete
Connecting to SSID: LolaDog
IP Address: 192.168.0.20
Performing HTTP GET of: www.example.com

HTTP/1.1 404 Not Found
Content-Type: text/html
Date: Sat, 09 May 2015 21:19:04 GMT
Server: ECS (mdw/1275)
Content-Length: 345
Connection: close

<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
         "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	<head>
		<title>404 - Not Found</title>
	</head>
	<body>
		<h1>404 - Not Found</h1>
	</body>
</html>

Finished WebClient test

--------------------------------

OK, also promising. Using pongtester.herokuapp.com for both:

char server[] = "pongtester.herokuapp.com";

... and:

#define HOST "pongtester.herokuapp.com"

... I get another 404 Not Found.

So why does entering the same thing as a GET in postman return my app?

Is this just a matter of needing a delay?

Mabye... I also needed to be seeking a page that actually existed... not index.html,
but rather just "/"... and... SUCCESS!

Here's the complete heroku log from my successfull attempt:

2015-05-11T02:32:37.785257+00:00 heroku[router]: at=info method=GET path="/" host=pongtester.herokuapp.com request_id=9b6d5dbb-950b-4eab-8db7-473cd4bdf254 fwd="75.166.74.55" dyno=web.1 connect=1ms service=15ms status=200 bytes=2903
2015-05-11T02:32:37.779953+00:00 app[web.1]: Started GET "/" for 75.166.74.55 at 2015-05-11 02:32:37 +0000
2015-05-11T02:32:37.788165+00:00 app[web.1]:   Rendered led/index.html.erb within layouts/application (0.7ms)
2015-05-11T02:32:37.786120+00:00 app[web.1]: Processing by LedController#index as HTML
2015-05-11T02:32:37.789421+00:00 app[web.1]: Completed 200 OK in 3ms (Views: 2.8ms | ActiveRecord: 0.0ms)

------------------------------------------

This wasn't working for me:

<script type="text/javascript">
var xhr = new XMLHttpRequest();


xhr.onreadystatechange=function() {
  if (this.readyState === 4 && this.status === 200)
    {
    document.getElementById("myDiv").innerHTML="hooptydoo";
    }
  }
xhr.open("GET", "/numberup", true);
xhr.send();
}
</script>

<div id="myDiv"><h2>Let AJAX change this text</h2></div>
<button type="button" onclick="loadXMLDoc()">Change Content</button>

------------------------------------------



--------------------------------

This was in the Maybe view:

<!DOCTYPE html>
<html>
<head>
  <title>Arduino Web Page</title>
  <script>
  function GetSwitchState()
  {
    nocache = "&nocache=" + Math.random() * 1000000
    var request =jew XMLHttpRequest
    request.onreadystatechange = function()
    {
      if (this.readyState === 4) {
        if (this.status === 200) {
          if (this.responseText != null) {
            document.getElementbyId("switch_txt").innerHTML = this.responseText;

          }
        }
      }
    }
    request.open("GET", "ajax_switch" + nocache, true);
    request.send(null);
    setTimeout("GetSwitchState()", 1000)
  }
  </script>
</head>
<body onload="GetSwitchState()">
  <h1>Arduino AJAX Switch Status</h1>
  <p id="switch_text">Switch state: Not requested...</p>
</body>
</html>
