Potential issues:

Some sites say Arduino 1.0.5 wasn't working with shield, but that 1.0.3 was. Am
currently using 1.6.3. Don't know if that version has known issues. Haven't seen any
sites say that it does. Although you'd have to go back and check if they're talking
about the official Arduino shield or the CC3000.

Might consider adding antenna to boost signal

Heroku add-ons? Can I add on dino or arduino?


OK, some info gathered from Heroku info pages (all bookmarked):

"The Heroku platform automatically routes HTTP requests sent to your app’s hostname(s)
to your web dynos."
"Inbound requests are received by a load balancer that offers SSL termination. From here
they are passed directly to a set of routers. The routers are responsible for
determining the location of your application’s web dynos and forwarding the HTTP
request to one of these dynos. A request’s unobfuscated path from the end-client
through the Heroku infrastructure to your application allows for full support of
HTTP 1.1 features such as chunked responses, long polling, websockets, and using an
async webserver to handle multiple responses from a single web process."

... There's some info on timeouts, not quite sure if it applies for this case, but
you may want to look at it...
... also on response buffering, same thing...
... also for "100-continue", which I don't think I'd need
... Also a whole page on worker dynos, which I don't think I'd need

From this page:
http://en.wikipedia.org/wiki/Push_technology
"For example, BOSH is a popular, long-lived HTTP technique used as a long-polling
alternative to TCP when TCP is difficult or impossible to employ directly (e.g.,
in a web browser); it is also an underlying technology in the XMPP, which Apple
uses for its iCloud push support."

YOU MAY VERY MUCH NEED TO LOOK AT WHAT BOSH HAS TO OFFER!
http://en.wikipedia.org/wiki/BOSH

So here's a typical request that goes to Heroku. This request was made when I
refreshed the page at Heroku. So I guess this is the type of request you'd have
to send to Heroku one way or another. (NOTE: At the very beginning of the request,
there an extra bit, "at=info", but the Heroku info page doesn't indicate that that
is a necessary part of the request.):
  method=GET path="/" host=aqueous-scrubland-2496.herokuapp.com
  request_id=2e89beee-6b43-475e-a05a-f7180cb4762d fwd="75.166.2.229" dyno=web.1
  connect=1ms service=107ms status=200 bytes=2975

"WebSocket functionality is supported for all applications."

...Lots more, too much, on the Dynos page. Leaving it open for now.




-------------

Wednesday 5/6 8:30 p.m.

Where are we:
  With shield attached, am still able to upload dino sketch and then can run app via
  local host. (Changed button input to pin 5; I think that that 2 wasn't available with
  the shield, although I can't remember if I tried it or not.)

  Also with shield attached, can connect to internet from home and send get requests to
  some sites, although currently not Heroku.

  ... Well, I wrote the above, but now I AM having issues connecting. The internet
  connection test isn't returning anything.
  ... OK ran a test, and it shows Arduino isn't identifying the wifi shield at all.
  ... In fact, I took off the shield and tried just the basic app on localhost, and
  terminal tells me the board is not connected!
  ... huh, so I saw that the usual serial port I was supposed to be using was not
  listed... which I guess stemmed from me upgrading to Arduino 6.3 yesterday. I
  know this because when I opened 1.0.6, I was able to see that port was available.
  And now, my app is once again OK to run on local host.
  ... and connection test works again.

  Don't tell me I'm gonna have to read all the Arduino update notes to figure out
  if I should stick with this version or get the right drivers working on the latest
  version...

  Well, I did see something about 6.3 fixing an issue with being able to connect
  to urls that start with https, and my Heroku app is one of those, so...

  OK, tried using "heroku console" command in terminal, that is no longer offered.
  Was able to do "heroku run rails s" instead, but it doesn't recognize the existence
  of the board... So I've gotta think that pretty much answers that I'm not going to
  be able to affect Heroku via a button plugged into my computer (never had planned
  to, anyway -- but it woulda be a helpful midpoint. I suppose I could get a program
  to trigger a pusher event and therefore Heroku, but... nope, not unless I'm
  totally out of ideas).
  ... while reading a bunch of Heroku info pages, saw an option to use "heroku run
  bash". Which I did... but same issue: "the board is not connected".

  Maybe try to connect to local host via wifi then use buttons? Maybe. But that's
  going to involve new challenges.
  If you're gonna try that, see this:
  http://forum.arduino.cc/index.php?topic=177527.0
  Googling your ip address returned this: 75.166.2.229
  ... although I don't know if that's the right address, or if there's a second one
  associated with my computer, or if I need my router address.
  ... by the way, the Google IP address provided by the above site didn't work for me,
  but don't know why.

OK, think this through:
  Button press can get to my computer via USB.
  Wirelessly, want to do button press and see effect -- at least on home computer.
    BUT there is no code on the Arduino telling it what to do with a button push.
    The Rails server is running my program, and because that program can talk to
    the Arduino through Dino, it can listen for the button push and act accordingly.
  If program is on Heroku... well, it can't sense the board is there. Upon deploy, it
  says as much: "The board is not connected." So...



-------------

Tuesday 5/5 midnight: Can't quite figure out how to access Heroku through the wifi.
Can connect to other sites like www.example.com and www.google.com. Since my Heroku
site doesn't have a "www", had to use the server "http://aqueous-scrubland-2496.herokuapp.com".
Seems to almost connect, then says it can't make a TCP/IP connection.

Also: Downloaded the Adafruit library, but that just wouldn't work. I thought it
might. Guess the code don't match up. Still, the sketch that Adafruit suggested
may have some usage for me... Although I just tried to delete it, so you might have
to find it on the web. Also, try to get rid of the Adafruit Library listing under
"Examples" (as well as any other associated files.)

Huh, the on-off buttons that turn on/off led on arduino aren't working anymore. Not
worrying about that, though -- button still works.

----------------------

may have to use ruby version 1.9.3 to make this work?

Huh, so it appears that not precompiling my assets (by adding the lib/assets.rake file
and its interior code) doesn't stop my app from running locally... but it does slow it
DOWN a fair bit. It's now not always registering clicks; and also, the outpput in the
terminal is decidedly slower. In fact, sometimes the click registers on the webpage but
NOT in the terminal. Strange.
... No, maybe that's not the issue. My computer is moving slowly suddenly. Apparently
because of all the Heroku push attempts I just made, although I don't understand why
that'd be an issue... Seems to be an issue only with the button; using the in-page
button works fine. Hope I didn't overload my Arduino...
... well, I unplugged it, stopped Rails server, re-plugged it back in, re-started Rails
server and all is well again...

... However, the addition of that assets.rake file did not fix the Heroku-push error.

... oh, wait, I THINK stuff has to be pushed to GitHub first, then to Heroku. I think
you're supposed to be able to skip the GitHub step, but maybe I'm configured to
require that.

... Huh, that did it. I STILL got the error saying that the rake had been aborted, and
that I had an unitialized constant YAML... and yet the deploy was complete, apparently.
Now, though, can I use this app via Heroku, or did I just block something that was
necessary to have?

Well, can't even see Heroku page for now... page said error occurred in application.
Thought it might be a database issue. Tried to migrate database, it wouldn't let me...

Hmm, I wonder if that's an issue with using Pusher.

Well, someone on the internets told me, and maybe I knew this, I dunno, that you DON'T
do a Heroku db:create. It won't let you. You instead to a db:migrate.

OK, so next issue is back to same I've seen before: unintialized constant YAML. So
neither a push nor a db:migrate will work till I've fixed this issue.

OK, so, added the 'dotenv' gem, and a ".env" file with the pusher stuff in it, and
added the ".env" file to the gitignore file. App still working locally, athough
seems to be moving slower. Could be an issue other than that of the code changes,
though...

... Actually, the "moving slower" thing was due to the connection loosening... that was
an easy fix, although not the first thing I thought of...

Fiddled with moving things around more, in order to make pusher.yaml file "viewable" by
Heroku, and was able to push to Heroku once more... BUT still saw same error of
'unitialized constant yaml.' So... yep, still can't open Heroku page.

So one thing I think I'm verifying here, and maybe I knew this once upon a time, but I
had damn well forgotten it, is that with my current app settings, I am UNABLE to push
changes to Heroku unless I first push those changes to GitHub. (I suppose it's possible
that all I have to do is COMMIT changes, not push them, but whatever.) YOU INDEED
VERIFIED THIS; YOU HAD THE GEM 'PG' TWICE IN THE GEMFILE, THEN COMMENTED OUT ONE OF
THEM, AND THEN TRIED TO PUSH TO HEROKU, BUT ERROR STILL SAID YOU HAD TWO LISTINGS OF
THAT GEM. AFTER YOU COMMITTED YOUR CHANGE AND PUSHED TO GITHUB, YOU WERE ABLE TO PUSH
TO HEROKU WITHOUT THAT ERROR.

So: It's a good lesson, one that will take me forever to learn, but still:
  You had been trying to push to Heroku for... what? At least a few hours? And each time,
  you saw an error message that said you had the gem 'pg' listed in two different
  places in your gemfile. But then there also was that "uninitialized constant YAML"
  error, and so you were concentrating on that. FOR HOURS. And then finally you
  decided to just get rid of that small error that you were sure was not the problem.
  And after you did, you were able to push to Heroku.
    For fuck's sake. I don't even know if that solves all of my Heroku-push problem,
    but it sovles one I'd been at for hours. You have really got to slow your roll a
    bit when problem-solving. If I'd just read that error and tackled that error first...

Once again, just for the notes:
  Removing the 'pg' duplicate from my gemfile (the one NOT under group :production do)
  solved my issue.

Indeed, even though I had created a lib/assets/assets.rake and added this:
  Rake::Task["assets:precompile"].clear
  namespace :assets do
    task 'precompile' do
        puts "Not pre-compiling assets..."
    end
  end
... that turned out not to be the issue.

The answer was staring at me the whole damnin' time.

OK, SO AFTER ALL THAT... pushing the button does nothing to affect Heroku. Maybe I
should have expected that. Then again... well, more to look at.

Preliminary look makes it seem as though I needed wireless NOT ONLY to get cords away
from ping pong table, but also to reach Heroku in the first place. Though I'm not
convinced. Why WOULDN'T Heroku site be able to respond to this?

HEY I did good that time. Couldn't connect Arduino to wifi. Only spend about 20 minutes
looking online before I just went back and considered that my network password was
wrong. Fixed password, and got connected. Cool.

----------------------

So here are the pins that I think are off-limits (this comes from
https://learn.sparkfun.com/tutorials/cc3000-hookup-guide):

The pins used by the shield are as follows:

2 (INT) is the interrupt pin that the CC3000 uses to notify the Arduino that it has data.

7 (EN) is the enable pin that the Arduino uses to turn the CC3000 off and on.

8 (SDCS) is the chip select for the SD card.

10 (CS) is the chip select for the CC3000.

11 (MOSI) is the SPI communication line from the Arduino to the CC3000.

12 (MISO) is the SPI communication line from the CC3000 to the Arduino.

13 (SCK) is the SPI clock line.
